#include <avr/pgmspace.h>
#include "MsTimer2.h"
#include "EEPROM.h"

prog_uchar sines[] PROGMEM = {128,144,160,175,190,203,216,227,236,244,250,254,255,255,254,250,244,236,227,216,203,190,175,160,144,128,112,96,81,66,53,40,29,20,12,6,2,0,0,2,6,12,20,29,40,53,66,81,96,112,128,145,161,177,193,207,220,231,240,247,252,255,255,254,250,244,235,226,214,200,185,169,153,136,119,102,86,70,55,41,29,20,11,5,1,0,0,3,8,15,24,35,48,62,78,94,110,128,146,164,181,197,211,225,235,244,250,254,255,254,250,244,235,225,211,197,181,164,146,128,109,91,74,58,44,30,20,11,5,1,0,1,5,11,20,31,44,58,74,91,109,128,147,166,184,201,217,229,240,248,253,255,255,251,244,235,223,209,193,175,157,137,118,98,80,62,46,32,20,11,4,0,0,2,7,15,26,38,54,71,89,108,128,148,168,187,204,220,233,243,251,255,255,253,247,238,227,212,196,178,158,138,117,97,77,59,43,28,17,8,2,0,0,4,12,22,35,51,68,87,107,128,149,170,190,208,224,236,246,253,255,254,250,242,230,216,199,180,160,138,117,95,75,56,39,25,13,5,1,0,2,9,19,31,47,65,85,106,128,150,172,193,212,228,240,250,254,255,252,245,234,220,203,183,162,139,116,93,72,53,35,21,10,3,0,1,6,15,27,43,62,83,105,128,152,175,197,216,232,244,252,255,254,249,238,225,206,186,164,140,115,91,69,49,30,17,6,1,0,3,11,23,39,58,80,103,128,153,178,200,220,236,248,254,255,251,242,229,211,190,166,140,115,89,65,44,26,13,4,0,1,7,19,35,55,77,102,128,155,181,205,225,240,251,255,254,246,233,216,194,168,141,114,87,61,39,22,9,1,0,4,15,30,50,74,100,128,156,183,207,228,243,252,255,252,243,228,207,183,156,128,99,72,48,27,12,3,0,3,12,27,48,72,99,128,158,187,213,233,247,255,255,247,233,212,187,158,128,97,68,43,22,8,0,0,8,22,43,68,97,128,160,190,216,236,250,255,254,244,227,203,175,144,112,81,53,29,12,2,0,6,20,40,66,96,128,162,194,221,241,253,255,248,232,208,178,145,110,77,47,23,7,0,2,14,34,61,93,128,164,197,225,244,254,254,244,225,197,164,128,91,58,30,11,1,1,11,31,58,91,128,165,199,228,247,255,252,238,215,183,147,108,72,40,17,3,0,8,27,56,90,128,169,206,235,252,255,245,222,189,149,106,66,33,10,0,3,20,49,86,128,171,210,238,254,254,238,210,171,128,84,45,17,1,1,17,45,84,128,174,214,242,255,251,230,195,151,104,60,25,4,0,13,41,81,128,176,218,246,255,246,218,176,128,79,37,9,0,9,37,79,128,179,223,250,255,238,203,154,101,53,17,0,6,32,76,128,183,228,252,252,228,183,128,72,27,3,3,27,72,128,183,228,252,252,228,183,128,72,27,3,3,27,72,128,187,233,255,247,212,158,97,43,8,0,22,68};
prog_uchar triangles[] PROGMEM = {127,137,147,158,168,178,188,199,209,219,229,240,250,250,240,229,219,209,199,188,178,168,158,147,137,127,117,107,96,86,76,66,55,45,35,25,14,4,4,14,25,35,45,55,66,76,86,96,107,117,127,137,148,159,170,181,192,203,214,224,236,247,250,241,230,219,208,198,186,175,165,154,142,132,121,111,99,88,78,67,55,45,34,23,12,4,6,17,29,39,50,61,72,83,94,105,116,127,138,149,162,173,184,197,208,219,231,243,250,243,231,219,208,197,184,173,162,150,138,127,115,103,91,80,69,56,45,34,22,10,4,10,22,34,45,57,69,80,91,103,115,127,139,151,164,176,189,202,214,226,239,250,245,233,220,208,195,182,170,158,145,133,120,108,95,83,71,58,45,33,20,8,4,14,27,39,51,64,77,89,102,114,127,139,153,166,179,192,205,218,231,245,250,238,225,212,199,185,172,160,146,133,120,107,93,81,68,54,41,28,15,4,8,22,35,48,61,74,87,100,114,127,140,154,168,182,196,210,223,237,250,244,230,216,203,188,175,161,147,133,120,106,92,78,65,50,37,23,9,4,16,30,43,57,71,85,99,113,127,141,156,170,185,200,214,229,244,250,236,221,207,192,178,163,148,134,119,105,90,76,61,46,32,17,4,9,25,39,53,68,83,97,112,127,142,158,173,188,204,219,235,250,243,227,212,197,181,165,150,134,119,103,88,72,56,41,26,10,4,18,34,49,65,80,95,111,127,143,160,176,192,209,225,242,250,234,217,201,184,168,151,135,118,102,85,69,52,36,19,4,11,28,44,61,77,93,110,127,144,162,179,197,215,232,250,242,223,206,188,171,153,135,118,100,82,65,47,30,11,4,21,38,56,74,91,109,127,144,163,181,200,218,236,250,236,218,200,181,163,144,127,109,90,72,53,35,17,4,17,35,53,72,90,109,127,146,166,185,205,225,245,245,225,205,185,166,146,127,107,87,68,48,28,8,8,28,48,68,87,107,127,147,168,188,209,229,250,240,219,199,178,158,137,117,96,76,55,35,14,4,25,45,66,86,107,127,148,171,193,215,238,249,226,205,182,160,137,116,93,71,48,27,4,15,38,60,82,105,127,149,173,197,219,243,243,219,197,173,150,127,103,80,56,34,10,10,34,57,80,103,127,151,175,200,224,249,236,212,187,163,138,115,90,66,41,17,4,29,53,78,102,127,153,180,207,234,248,221,194,167,140,113,86,59,32,5,19,46,73,100,127,155,183,212,241,241,212,183,155,127,98,70,41,12,12,41,70,98,127,157,186,217,247,232,202,172,141,112,81,51,21,6,36,67,96,127,159,190,222,250,222,190,159,127,94,63,31,4,31,63,94,127,161,195,229,246,212,178,143,110,76,41,7,25,58,92,127,163,200,236,236,200,163,127,90,53,17,17,53,90,127,163,200,236,236,200,163,127,90,53,17,17,53,90,127,166,205,245,225,185,146,107,68,28,8,48,87};
prog_uchar saws[] PROGMEM = {133,138,143,148,154,159,164,169,174,179,184,189,195,200,205,210,215,220,225,230,236,241,246,251,128,5,10,15,20,26,31,36,41,46,51,56,61,67,72,77,82,87,92,97,102,108,113,118,123,128,133,138,143,149,155,160,165,171,176,181,187,193,198,204,209,214,220,225,230,237,242,247,201,70,7,12,18,24,29,35,40,45,51,56,62,68,73,78,84,89,94,100,106,111,117,122,127,133,138,144,150,156,162,168,173,179,185,191,197,203,208,214,220,225,231,238,243,249,144,5,10,16,22,28,34,40,45,51,57,63,69,75,80,86,92,97,103,110,115,121,127,133,139,145,151,158,164,170,176,182,188,195,202,208,214,220,226,233,239,245,229,80,8,14,20,27,33,39,45,51,57,64,71,77,83,89,95,101,108,114,120,126,133,139,145,153,159,166,172,178,185,192,199,205,211,218,224,231,238,244,241,83,8,14,21,28,34,41,47,54,60,67,74,80,87,93,99,107,113,120,126,133,139,146,154,161,167,174,181,188,195,202,209,216,222,229,237,244,250,88,8,15,22,29,36,43,49,56,63,71,77,84,91,98,105,112,119,126,133,140,147,155,162,169,176,184,191,199,206,213,220,227,236,243,250,92,8,15,23,31,38,45,52,59,67,74,82,89,96,103,111,118,125,133,140,148,156,164,171,179,187,195,203,210,218,225,234,242,249,98,8,16,24,32,40,47,55,63,71,78,86,94,101,110,117,125,133,141,149,158,166,174,182,190,199,207,215,223,232,240,248,104,9,17,26,34,42,50,58,67,75,83,91,99,108,116,124,133,141,150,159,168,177,185,195,203,212,221,229,239,248,111,9,17,27,36,44,53,62,71,80,88,97,106,115,124,133,141,151,160,169,178,187,197,206,215,224,233,243,224,5,13,23,32,41,50,59,69,78,87,96,105,115,124,133,142,153,162,172,182,192,202,211,221,231,241,241,5,14,25,34,44,54,64,74,83,93,103,113,123,133,143,154,164,174,184,195,205,215,225,236,246,128,10,20,31,41,51,61,72,82,92,102,113,123,133,143,155,166,177,188,200,211,221,233,244,138,10,21,33,44,54,66,77,88,99,111,122,133,144,156,168,179,191,203,214,225,238,249,5,16,28,40,51,63,75,86,97,110,121,133,144,157,169,181,194,206,218,230,243,151,10,23,35,47,59,72,84,96,109,121,133,146,160,173,186,200,213,227,241,166,11,25,38,52,66,79,92,106,119,133,146,161,175,189,204,218,232,247,5,18,33,47,61,76,90,104,119,133,147,163,178,193,208,223,238,185,12,28,42,57,73,87,102,118,133,148,165,180,197,213,228,245,5,20,37,52,69,85,100,117,133,149,167,184,201,218,236,209,13,31,47,65,82,98,116,133,151,169,187,206,224,243,5,23,41,59,78,96,115,133,151,169,187,206,224,243,5,23,41,59,78,96,115,133,153,172,192,211,231,241,14,34,54,74,93,113};
prog_uchar squares[] PROGMEM = {255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,151,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,34,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,235,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,200,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,235,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,22,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,48,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,80,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,120,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,169,0,0,0,0,0,0,0,255,255,255,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,255,255,235,0,0,0,0,0,0};
int pgmLoc[] = {0,50,97,141,182,221,258,293,326,357,386,414,440,465,488,510,531,550,568,585,601,616,630,644};
prog_uint16_t furElise[] PROGMEM = {0,0,0,0,43008,20480,512,0,256,1026,0,132,0,0,0,0,75,0,0,0,16,0,0,160,0,0,0,0,168,80,2,0,2049,4100,0,0,40960,0,0,0,17664,0,0,0,0,0,0,2560,0,0,0,0,0,0,0,0,32,528,0,33800,128,0,0,0,19269,0,0,0,4096,0,0,40970,0,0,0,0,43008,20480,512,0,256,1026,0,132,0,0,0,0,75,0,0,0,16,0,0,160,0,0,0,0,168,80,2,0,2049,4100,0,0,40960,0,0,0,17664,0,0,0,0,0,0,2560,0,0,0,0,0,0,0,0,32,529,0,33800,128,0,0,0,19268,0,0,0,4096,0,0,40970,0,0,0,512,8456,0,16516,0,32770,0,0,0,0,5312,0,16,1,0,0,0,10240,32,0,2,0,0,0,0,186,5,8192,0,4096,2048,0,0,0,0,0,0,20288,0,0,0,0,0,0,32768,0,0,0,0,40960,16384,2048,0,1024,4104,0,528,2,0,0,0,301,0,0,0,64,0,0,640,0,0,0,0,672,320,8,0,8196,16400,0,2,32768,0,0,0,5121,0,0,0,0,0,0,10242,0,0,0,0,0,0,1,0,130,2116,0,4128,512,0,0,0,11536,0,0,0,16384,0,0,32808,0,0,0,2048,33824,0,528,0,8,0,0,0,0,21248,0,64,5,0,0,0,40960,128,0,10,0,0,0,0,746,21,32768,0,16384,8192,0,0,0,0,0,0,15616,0,0,0,0,0,0,0,0,0,0,0,32768,0,8192,0,4096,16417,0,2112,10,0,0,0,1204,0,0,0,256,0,0,2560,0,0,0,0,2688,1280,32,0,32784,64,0,8,0,0,0,0,20484,0,0,0,1,0,0,40970,0,0,0,0,0,0,0,0,533,8448,0,16512,2048,1,0,4,46161,0,0,0,21,0,17,164,0,0,0,64,12,0,0,0,16384,0,0,0,0,0,0,16388,0,0,0,0,1088,0,1,4368,0,16,0,4,1,0,16384,0,0,0,1024,128,0,4,0,68,17,0,17408,0,0,0,4356,0,0,0,0,0,0,0,16384,0,4096,0,1024,69,0,16386,0,17408,4096,0,0,0,68,0,16384,273,0,0,0,0,4,16,64,0,16384,0,32768,0,0,0,0,16384,4,0,0,0,1088,0,0,4369,0,0,0,1024,4096,0,0,0,64,0,0,256,0,68,0,256,17,0,1024,0,16384,0,0,4096,0,682,0,0,0,0,16385,0,1028,2064,0,64,0,16661,0,4113,1028,0,1,0,1024,0,0,0,0,41506,0,272,16384,0,136,0,4164,2048,0,1024,0,16449,0,1024,16384,0,0,0,16388,64,0,1024,0,43682,0,1,64,0,256,0,1040,4104,0,16388,0,5440,0,4356,1088,0,256,0,64,0,0,4,0,8192,0,4608,34133,136,18432,0,0,34,0,0,1024,16384,0,0,0,0,0,0,0,17408,0,0,0,0,0,0,16709,32898,0,0,0,520,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21760,43520,64,0,32,128,0,16,0,0,0,0,9,0,0,0,2,0,0,20,0,0,0,0,21,10,0,0,256,16896,0,32768,5120,0,0,0,26784,0,0,0,0,0,0,320,0,0,0,0,0,0,16384,0,8196,32834,0,4225,16,0,0,0,2408,0,0,0,512,0,0,5121,0,0,0,0,5376,2560,64,0,32,128,0,16,0,0,0,0,40969,0,0,0,2,0,0,16404,0,0,0,0,21,10,0,0,256,16896,0,32768,5120,0,0,0,26784,0,0,0,0,0,0,320,0,0,0,0,0,0,16384,0,8196,32834,0,4225,16,0,0,0,2408,0,0,0,512,0,0,5121,0,0,0,64,1057,0,2064,0,4096,8192,0,0,0,664,0,2,32768,0,0,0,1280,4,0,16384,0,0,0,0,23,0,33792,0,16896,256,0,0,0,0,0,0,10728,0,0,0,0,0,0,20480,0,0,0,0,21504,43008,256,0,128,513,0,66,0,0,0,0,37,0,0,0,8,0,0,80,0,0,0,0,84,40,1,0,1024,2050,0,0,20480,0,0,0,41600,0,0,0,0,0,0,1280,0,0,0,0,0,0,0,0,32784,264,0,16900,64,0,0,0,9632,0,0,0,2048,0,0,20487,0,0,0,3,4,0,67,4100,0,0,4096,64,1,4096,0,64,4096,0,0,0,0,0,0,65535,0,0,0,4096,1024,0,4112,0,1025,0,0,1024,4096,0,0,17,0,0,31,0,0,0,0,65535,0,0,0,0,0,0,0,0,64,32784,0,17668,24,0,16384,0,504,32256,32784,0,17668,0,0,65511,0,0,0,3,4,0,67,4100,0,0,4096,64,0,4096,0,64,4096,0,0,0,0,0,0,65535,0,0,0,5120,0,16,5121,0,0,0,0,0,0,16,0,1,0,0,0,0,0,0,2047,63488,0,0,0,0,0,0,0,0,32768,0,16384,1028,272,0,0,17680,4,32768,17680,0,4,504,65024,0,0,0,0,0,2,0,1,0,4,4096,0,8,4096,0,0,4096,4113,0,0,0,97,0,0,1,0,0,0,0,2308,0,128,0,37449,16416,0,9234,0,0,0,0,8336,0,0,0,8336,0,0,8336,0,0,0,0,32768,0,16384,0,8192,4096,2048,1024,512,256,128,64,18464,16,8,4,18434,1,0,18432,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32768,16384};
prog_uint16_t song[] PROGMEM = {0,0,0,0,0,0,1024,0,0,0,0,0,10832,0,168,0,0,0,20740,0,0,2,0,32769,0,0,0,0,0,0,1024,0,0,0,0,0,10832,0,168,0,0,0,20740,0,0,2,0,32769,0,0,0,0,0,0,1024,0,0,0,0,0,10832,0,168,0,0,0,20740,0,0,2,0,32769,0,0,0,0,0,0,1024,0,0,0,0,0,10832,0,168,0,0,0,20740,0,0,2,0,32769,0,43008,0,672,0,0,10,0,0,0,0,0,10752,0,168,0,0,0,0,0,0,2,0,32768,160,43520,0,0,0,0,10,0,0,0,0,0,10752,0,168,0,0,0,0,0,0,2,0,32768,0,43008,0,672,0,0,4106,0,0,0,0,0,80,0,0,0,0,0,17668,0,0,32768,0,2,0,43008,0,544,0,16,5256,0,2,0,0,0,80,0,0,0,0,0,17668,0,0,0,0,32770,0,43008,0,672,0,0,1034,0,0,0,0,0,10832,0,168,0,0,0,20740,0,0,2,0,32769,160,43520,0,0,0,0,1034,0,0,0,0,0,10832,0,168,0,0,0,20740,0,0,2,0,32769,0,43008,0,672,0,0,1034,0,0,0,0,0,10832,0,168,0,0,0,20740,0,0,2,0,32769,0,43008,0,544,0,16,1160,0,2,0,0,0,10832,0,168,0,0,0,20740,0,0,2,0,32769,0,43008,0,672,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,43520,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43008,0,672,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43008,0,544,0,16,1160,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34816,0,544,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,34816,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34816,0,544,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,34816,4,544,0,0,264,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
boolean fur = false;
prog_uchar (*waveform)[657] = &sines;
byte noteSize[24];
boolean playing = false;
int playColumn = 0;
int numNotes = 0;
int noteNumber = 0;
int positions[24];

boolean noteComplete = true;

//float const notes[16] = {1760, 1480, 1318.5, 1174.7, 987.8, 880, 740, 659.3, 587.3, 493.9, 440, 370, 329.6, 293.7, 246.9, 220};
int const notes[24] = {220, 233, 247, 262, 277, 294, 311, 330, 349, 370, 392, 415, 440, 466, 494, 523, 554, 587, 622, 659, 698, 740, 784, 831};
unsigned long buttonTimeClicked[6] = {0};
int resetTimes = 0;
boolean buttonState[6] = {false};
boolean lastRead[6] = {false};
#define debouncing 10

int timer = 0;
int timerAmount = 0;
boolean timerRunning = false;
void (*timerFunction)();
byte selectedMatrix[8];
int xGrid = 0, yGrid = 16, grid = 0, row = 0;

int numColumnSets = 1;
word matrix[24][48] =
{
  {0}
};

boolean menuActivated = false;

char* menu1[9] = 
{
  "1. Waveform",
  "2. Settings",
  "3. Save",
  "4. Load",
  "5. Reset",
  "6. Song Size",
  "7. Fur Elise",
  "8. Stepeggio",
};

char* menu2[4] =
{
  "1. Sine",
  "2. Triangle",
  "3. Saw",
  "4. Square",
};

char* menu3[2] = 
{
  "1. Local",
  "2. Global",
};

char* menu4[2] = 
{
  "1. Tempo",
  "2. Exit",
};

char* menu5[3] =
{
  "1. Tempo",
  "2. Enabled",
  "3. Exit",
};

#define size1 7
#define size2 3

byte localSettings[48];
byte globalSettings = B00001101;

int state1[8] = {2, 2, 5, 5, 5, 3, 5, 5};
int state2[4] = {1, 0, 0, 0};

int menuPos[3] = {0};
int menuDepth = 0;

//#define TSLeft 280
//#define TSRight 780
//#define TSTop 770
//#define TSBottom 180

#define TSLeft 180
#define TSRight 770
#define TSTop 780
#define TSBottom 280

#define TSTime 1
#define TSThreshold 890

#define DT 4
#define DR 2
#define DB 5
#define DL 3

#define AR 1
#define AT 0

#define TSScrollTime 100

#define TSStoredSize 2
int TSStored[2][2] = {0};
int TSSameCount = -1;
boolean TSScroll = false;

unsigned long TSLastChanged = 0;

int TSLastPressed[2];
boolean pressed = false;
boolean set;
int storedXGrid = xGrid;

void setup()
{
  Serial.begin(38400);
  //audioEEPromWrite();
  
  MsTimer2::set(1, update);
  MsTimer2::start();
  
  audioInit();
  LCDInit();
  matrixInit();
  menuInit();

  //saveAll();
  DDRA = 255;
  DDRC = 255;
  DDRL = 255;
  LCDDisplayTitle();
}

void loop()
{
  checkButtonState();
  pollTouchscreen();
  if (Serial.available() != 0)
  {
    byte operation = Serial.read();
    if (operation == 1) upload();
    else if (operation == 2) download();
    else if (operation == 3) Serial.write(128);
  }
}

void reset()
{
  numColumnSets = 1;
  fur = false;
  MsTimer2::set(1, update);
  MsTimer2::start();

  matrixInit();
  for (int i = 0; i < 48; ++i)
    localSettings[i] = B00011000;
  globalSettings = B00001101;
}

void save()
{
  if (fur) return;
  int pos = 0;
  if (EEPROM.read(pos) != globalSettings)
    EEPROM.write(pos, globalSettings);
  for (int i = 0; i < 48; ++i)
  {
    ++pos;
    if (EEPROM.read(pos) != localSettings[i])
      EEPROM.write(pos, localSettings[i]);
  }
  ++pos;
  EEPROM.write(pos++, (byte)numColumnSets);
  for (int i = 0; i < 24; ++i)
    for (int j = 0; j < numColumnSets; ++j)
    {
      if (EEPROM.read(pos) != lowByte(matrix[i][j]))
        EEPROM.write(pos, (int)lowByte(matrix[i][j]));
      ++pos;
      if (EEPROM.read(pos) != highByte(matrix[i][j]))
        EEPROM.write(pos, (int)highByte(matrix[i][j]));
      ++pos;  
    }
}

void load()
{
  fur = false;
  matrixInit();
  int pos = 0;
  globalSettings = EEPROM.read(pos++);
  for (int i = 0; i < 48; ++i)
    localSettings[i] = EEPROM.read(pos++);
  numColumnSets = EEPROM.read(pos++);
  byte one, two;
  for (int i = 0; i < 24; ++i)
    for (int j = 0; j < numColumnSets; ++j)
    {
      one = EEPROM.read(++pos);
      two = EEPROM.read(++pos-2);
      matrix[i][j] = word(one, two);
    }
  setSelectedMatrix();
}

void loadFurElise()
{
  #define furEliseSize 1128
  fur = true;
  xGrid = 0;
  numColumnSets = 47;
  int count = 0;
  int columnSet = -1;
  for (int i = 0; i < 48; ++i)
    localSettings[i] = B00000000;
  globalSettings = B00010001;
  for (int i = 0; i < furEliseSize; ++i)
  {
    word current = pgm_read_word_near(furElise + i);
    matrix[(count < 24 ? (++count)-1 : (count = 0)++)][(count == 1 ? ++columnSet : columnSet)] = current;
  }
  setSelectedMatrix(); 
}

void loadStepeggio()
{
  #define songSize 480
  fur = false;
  xGrid = 0;
  numColumnSets = 20;
  int count = 0;
  int columnSet = -1;
  for (int i = 0; i < 48; ++i)
    localSettings[i] = B11100000;
  globalSettings = B00001101;
  for (int i = 0; i < songSize; ++i)
  {
    word current = pgm_read_word_near(song + i);
    matrix[(count < 24 ? (++count)-1 : (count = 0)++)][(count == 1 ? ++columnSet : columnSet)] = current;
  }
  setSelectedMatrix();
}

void startTimer(void (*var)(), int tAmount)
{
  timer = 0;
  timerAmount = tAmount/2; //because timer interrupt is 2ms
  timerFunction = var;
  timerRunning = true;
}

void stopTimer()
{
  timer = 0;
  timerRunning = false;
}

void download()
{
  while(Serial.available() < 50);
  globalSettings = Serial.read();
  for (int i = 0; i < 48; ++i)
  {    
    localSettings[i] = Serial.read();
  }
  numColumnSets = Serial.read();
  boolean upper = true;
  byte lowerByte, upperByte;
  int row = 0, columnSet = 0;
  int data = 50;
  while (true)
  {
    while(Serial.available() < 1);
    if (upper)  upperByte = Serial.read();
    else lowerByte = Serial.read();
    upper = !upper;
    ++data;
    if (data == 128)
    {
      giveOkay();
      data = 0;
    }    
    if (upper)
    {
      matrix[row][columnSet++] = word(upperByte, lowerByte);
      if (columnSet == 48)
      {
        ++row;
        columnSet = 0;
        if (row == 24) break;
      }
    }
  }
  giveOkay();
  setSelectedMatrix();
}

void upload()
{
  Serial.flush();
  Serial.write(globalSettings); //1
  for (int i = 0; i < 48; ++i)
  {
    if (localSettings[i] & 1 == 1)
      Serial.write(localSettings[i]); //49
    else
      Serial.write(globalSettings);
  }
  Serial.write(numColumnSets); //50
  for (int i = 0; i < 24; ++i)
  {
    for (int j = 0; j < 48; ++j)
    {
      Serial.write(highByte(matrix[i][j]));
      Serial.write(lowByte(matrix[i][j]));
    }
  }
}

void getOkay()
{
  while (!Serial.available());
}
void giveOkay()
{
  Serial.write(128);
}
